# -*- coding: utf-8 -*-
"""CSP_DBSCAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnmQmDFDpTMeaPPqr8eWs05wyIL8LEYX
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN
import seaborn as sns

"""### Loading the dataset"""

df = pd.read_csv("/content/drive/MyDrive/Datasets /Customer_Segmentation/bank.csv")

df.head()

"""### Preprocessing

Drop deposit column as it is not useful
"""

X = df.drop(columns=['deposit'])

"""Convert categorical features using one-hot encoding"""

X_encoded = pd.get_dummies(X, drop_first=True)

""" ### Standardize features"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_encoded)

"""### Step 4: DBSCAN"""

dbscan = DBSCAN(eps=5.0, min_samples=5)
clusters = dbscan.fit_predict(X_scaled)

"""In above code I had tried ep values from 0.5,1.0 ...... 5.5, I find the 5.0 the best balance."""

# Check new cluster distribution
import numpy as np
unique, counts = np.unique(clusters, return_counts=True)

for label, count in zip(unique, counts):
    print(f"Cluster {label}: {count} points")

df['cluster'] = dbscan.labels_

"""###Lets make a excel sheet for clusters to interpret the clusters, segmentation, and tableau viz.

1. Average Age per Cluster
"""

avg_age = df.groupby('cluster')['age'].mean()

"""2. Job Type Counts per Cluster (Admin, Blue-Collar, etc.)"""

pd.crosstab(df['cluster'], df['job'])
job_percent = pd.crosstab(df['cluster'], df['job'], normalize='index') * 100

"""3. Marital Status (% Married, Single, Divorced)"""

marital_percent = pd.crosstab(df['cluster'], df['marital'], normalize='index') * 100

"""4. Education Level (% Primary, Secondary, Tertiary, Unknown)"""

education_percent = pd.crosstab(df['cluster'], df['education'], normalize='index') * 100

""" 5. Median Balance"""

median_balance = df.groupby('cluster')['balance'].median()

"""6. Average Duration"""

avg_duration = df.groupby('cluster')['duration'].mean()

"""7. Average Campaign"""

avg_campaign = df.groupby('cluster')['campaign'].mean()

"""8. Average Balance"""

avg_balance = df.groupby('cluster')['balance'].mean()

"""9. Most Common Contact Day"""

most_contact_day = df.groupby('cluster')['day'].agg(lambda x: x.mode()[0])

"""10. Most Contact Month"""

most_contact_month = df.groupby('cluster')['month'].agg(lambda x: x.mode()[0])

"""11. Contact Type % (cellular/tel)"""

contact_percent = pd.crosstab(df['cluster'], df['contact'], normalize='index') * 100

""" Combine Everything"""

final_report = pd.DataFrame({
    'Average Age': avg_age,
    'Median Balance': median_balance,
    'Average Duration': avg_duration,
    'Average Campaign': avg_campaign,
    'Average Balance': avg_balance,
    'Most Contact Day': most_contact_day,
    'Most Contact Month': most_contact_month
})

# Merge job, marital, education, contact
final_report = pd.concat([
    final_report,
    job_percent,
    marital_percent,
    education_percent,
    contact_percent
], axis=1)

final_report.reset_index(inplace=True)  # Include ClusterID

"""Save as Excel"""

final_report.to_excel("DBSCAN_Clustering_Report.xlsx", index=False)

from google.colab import files
files.download("DBSCAN_Clustering_Report.xlsx")

"""###Visualize the Clusters"""

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

pca = PCA(n_components=2)
pca_result = pca.fit_transform(X_scaled)
df['pca1'] = pca_result[:,0]
df['pca2'] = pca_result[:,1]

plt.figure(figsize=(10,6))
plt.scatter(df['pca1'], df['pca2'], c=df['cluster'], cmap='tab20', s=10)
plt.colorbar()
plt.title('DBSCAN Clusters Visualized via PCA')
plt.show()